name: Deploy 수어랑(Sign Language Translator)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 옵션

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi

    - name: Run tests
      run: |
        echo "Tests will be implemented here"
        # pytest when tests are implemented

  build_backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/sueorang-backend:latest

  build_frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd frontend
        npm install

    - name: Build
      run: |
        cd frontend
        npm run build

    - name: Archive frontend build
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Download frontend build artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend-build

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          # 백엔드 업데이트
          cd /home/${{ secrets.DEPLOY_USERNAME }}/sueorang
          docker-compose down
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/sueorang-backend:latest
          
          # 환경 변수 설정
          echo "MONGO_USER=${{ secrets.MONGO_USER }}" > .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "MONGO_HOST=${{ secrets.MONGO_HOST }}" >> .env
          echo "MONGO_PORT=${{ secrets.MONGO_PORT }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          
          # 백엔드 재시작
          docker-compose up -d

    - name: Deploy frontend to Firebase
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        channelId: live
        projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
        entryPoint: ./frontend

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
    - name: Send notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: '수어랑 배포 결과: ${{ job.status }}'
        SLACK_TITLE: 수어랑 배포
        SLACK_USERNAME: GitHub Actions 