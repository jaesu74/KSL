apply plugin: "com.android.application"
// apply plugin: "com.facebook.react" // 존재하지 않는 플러그인이므로 주석 처리

// Vector icons 구성 코드 주석 처리
// project.ext.vectoricons = [
//     iconFontNames: [ 'MaterialIcons.ttf', 'FontAwesome.ttf' ]
// ]
// apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * 리액트 네이티브 구성 주석 처리
 */
// react {
//     /* Folders */
//     //   The root of your project, i.e. where "package.json" lives. Default is '..'
//     root = file("../../")
//     //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
//     reactNativeDir = file("../../node_modules/react-native")
//     //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
//     codegenDir = file("../../node_modules/react-native-codegen")
//     //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
//     cliFile = file("../../node_modules/react-native/cli.js")

//     /* Variants */
//     //   The list of variants to that are debuggable. For those we're going to
//     //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
//     //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
//     debuggableVariants = ["debug"]

//     /* Bundling */
//     //   A list containing the node command and its flags. Default is just 'node'.
//     nodeExecutableAndArgs = ["node"]
//     //
//     //   The command to run when bundling. By default is 'bundle'
//     bundleCommand = "bundle"
//     //
//     //   The path to the CLI configuration file. Default is empty.
//     bundleConfig = file("../../metro.config.js")
//     //
//     //   The name of the generated asset file containing your JS bundle
//     bundleAssetName = "index.android.bundle"
//     //
//     //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
//     entryFile = "index.js"
//     //
//     //   A list of extra flags to pass to the 'bundle' commands.
//     //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
//     extraPackagerArgs = []

//     /* Hermes Commands */
//     //   The hermes compiler command to run. By default it is 'hermesc'
//     hermesCommand = "../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"
//     //
//     //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
//     hermesFlags = ["-O", "-output-source-map"]

//     enableHermes = true  // clean and rebuild if changing
// }

/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * JavaScriptCore 관련 설정
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * 리액트 네이티브 아키텍처 지정
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    compileSdkVersion 34
    
    // 빌드 기능 활성화
    buildFeatures {
        buildConfig = true
    }
    
    // Java 버전 설정
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    defaultConfig {
        applicationId "com.sueohaja"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "x86_64", "arm64-v8a"
        }
    }
    
    // 서명 구성 제거
    
    buildTypes {
        debug {
            // signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            // signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
    
    namespace "com.sueohaja"
}

dependencies {
    // 기본 안드로이드 의존성
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")
    implementation("androidx.appcompat:appcompat:1.7.0")
    implementation("androidx.appcompat:appcompat-resources:1.7.0")
    implementation("com.google.android.material:material:1.12.0")
    implementation("androidx.constraintlayout:constraintlayout:2.2.1")
    
    // OkHttp 의존성 
    implementation("com.squareup.okhttp3:okhttp:4.9.3")
    
    // CameraX 의존성
    def camerax_version = "1.3.1"
    implementation("androidx.camera:camera-core:${camerax_version}")
    implementation("androidx.camera:camera-camera2:${camerax_version}")
    implementation("androidx.camera:camera-lifecycle:${camerax_version}")
    implementation("androidx.camera:camera-video:${camerax_version}")
    implementation("androidx.camera:camera-view:${camerax_version}")
    implementation("androidx.camera:camera-extensions:${camerax_version}")
    
    // TensorFlow Lite
    implementation("org.tensorflow:tensorflow-lite:2.12.0")
    implementation("org.tensorflow:tensorflow-lite-support:0.4.3")
    
    // Guava
    implementation("com.google.guava:guava:31.1-android")
}

// 직접 네이티브 모듈 디렉토리를 추가
repositories {
    mavenCentral()
    google()
} 